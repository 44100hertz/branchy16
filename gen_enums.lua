-- parallel code generation for C and typescript
--
--
local ops = {
    [0x0] = "Load",
    [0x1] = "Store",
    [0x2] = "Jump",
    [0x3] = "Branch",
    [0x4] = "Compare",
    [0x5] = "Putc",
    [0x6] = "Halt",
    [0x7] = "Unused_7",
    [0x8] = "Unused_8",
    [0x9] = "Unused_9",
    [0xA] = "Unused_A",
    [0xB] = "Unused_B",
    [0xC] = "Unused_C",
    [0xD] = "Unused_D",
    [0xE] = "Unused_E",
    [0xF] = "Unused_F",
};

local binOps = {
    [0x10] = "Add",
    [0x11] = "Unused_11",
    [0x12] = "Unused_12",
    [0x13] = "Unused_13",
    [0x14] = "Unused_14",
    [0x15] = "Unused_15",
    [0x16] = "Unused_16",
    [0x17] = "Unused_17",
    [0x18] = "Unused_18",
    [0x19] = "Unused_19",
    [0x1A] = "Unused_1A",
    [0x1B] = "Unused_1B",
    [0x1C] = "Unused_1C",
    [0x1D] = "Unused_1D",
}

local unOps  = {
    [0x0] = "Copy",
    [0x1] = "Unused_1",
    [0x2] = "Unused_2",
    [0x3] = "Unused_3",
    [0x4] = "Unused_4",
    [0x5] = "Unused_5",
    [0x6] = "Unused_6",
    [0x7] = "Unused_7",
    [0x8] = "Unused_8",
    [0x9] = "Unused_9",
    [0xA] = "Unused_A",
    [0xB] = "Unused_B",
    [0xC] = "Unused_C",
    [0xD] = "Unused_D",
    [0xE] = "Unused_E",
    [0xF] = "Unused_F",
    [0x10] = "Unused_10",
    [0x11] = "Unused_11",
    [0x12] = "Unused_12",
    [0x13] = "Unused_13",
    [0x14] = "Unused_14",
    [0x15] = "Unused_15",
    [0x16] = "Unused_16",
    [0x17] = "Unused_17",
    [0x18] = "Unused_18",
    [0x19] = "Unused_19",
    [0x1A] = "Unused_1A",
    [0x1B] = "Unused_1B",
    [0x1C] = "Unused_1C",
    [0x1D] = "Unused_1D",
    [0x1E] = "Unused_1E",
    [0x1F] = "Unused_1F",
};

local argNibble = {
  [0x0] = "R0",
  "R1",
  "R2",
  "R3",
  "R4",
  "R5",
  "R6",
  "R7",
  [0x8] = "Immed",
  [0x9] = "Const_0",
  [0xa] = "Const_1",
  [0xb] = "Const_Minus_1",
  [0xc] = "Unused_C_Arg",
  [0xd] = "Unused_D_Arg",
  [0xe] = "Unused_E_Arg",
  [0xf] = "Unused_F_Arg",
}

local compare = {
  [0] = 'Never',
  'Eq',
  'Lt',
  'Lte',
  'Gt',
  'Gte',
  'Neq',
  'Always',
};

local enums = {
  {"Op", ops, 0, 15, "ITAG_%s"},
  {"BinOp", binOps, 16, 29, "ITAG_%s"},
  {"UnOp", unOps, 0, 31, "ITAG_UNARY_%s"},
  {"Cond", compare, 0, 7, "COND_%s"},
  {"ArgNibble", argNibble, 0, 15, "%s"},
}

function write_warning(file)
  file:write[[
  // /!\ DO NOT MODIFY THIS FILE /!\
  //
  // It has been autogenerated from gen_enums.lua
  //
  // If you wish to change the instruction listing, edit gen_enums.lua
  // and then run gen_enums.lua with lua 5.2 or luajit.
  //
  ]]
end

function write_c_consts(file)
  write_warning(file)

  function write_c_enum(name, source, lower, upper, fmt)
    local fmtstring = string.format("    %s = 0x%%X,\n", fmt)
    file:write(string.format("enum %s {\n", name))
    for i = lower,upper do
      file:write(string.format(fmtstring, source[i]:upper(), i))
    end
    file:write "};\n"
    file:write "\n"
  end

  for _i,enum in ipairs(enums) do
    write_c_enum(unpack(enum))
  end

  file:close()
end


function write_ts_consts(file)
  function write_ts_enum(name, source, lower, upper)
    file:write(string.format("export enum %s {\n", name))
    for i = lower,upper do
      file:write(string.format("    %s = 0x%X,\n", source[i], i))
    end
    file:write "};\n"
    file:write "\n"
  end

  write_warning(file)

  for _i,enum in ipairs(enums) do
    write_ts_enum(unpack(enum))
  end

  file:close()
end

write_c_consts(io.output "./emulator/src/consts.h")
write_ts_consts(io.output "./types/consts.ts")
