* General
** TODO basic assembler for assembly JSON
*** DONE design basic assembly JSON format
*** DONE write hello_world_branching in TS
*** DONE compile it
*** DONE run it
*** TODO get rid of ugly binarygen.c once and for all
** TODO disassembler/debugger
*** TODO generate source maps
*** TODO display binary next to assembly code
*** TODO dump and parse CPU state
*** TODO step CPU
*** TODO set breakpoints
** TODO assembler structure editor web ui
*** TODO display assembly JSON on page
*** TODO basic edit assembly JSON
*** TODO load and save assembly JSON, plus localstorage
*** TODO pixel editor
** DONE create web app
* CPU
** TODO expand backing RAM to 128KiB
Many loads and stores in I/O devices check if the CPU RAM is below 0xf000 (RAM size). This should be removed.
I/O devices should use pointers into CPU RAM internally for certain values, instead of storing them themselves.
Loads, stores, and even jumps into I/O RAM should simply deal with backing memory and glitch out.
*** TODO document this in README
** TODO mutex load
Add a bitflag to the load instruction to indicate that it's a mutex load.
If the value loaded is 0, then continue execution.
If the value loaded is nonzero, then switch to a load-wait on that value.
Only mutex loads should singly unlock branches.
*** TODO document this in README
** TODO ROM to test arithmetic (multiply ROM)
** TODO more arithmetic
** TODO carry
** TODO signed ops
** TODO signed compare
** TODO Canvas-text overlay component
Use canvas-text overlays to create fast and readable colored UIs. Basically, a nearest-scaled canvas which is the behind some monospaced text where each memory word is one pixel.
** TODO memory viewer web ui
*** TODO Global memory viewer
Display global memory as a 16x16 grid (256 pages), but always select a particular page which is labeled and displayed above. Click on a page to view it.
**** TODO Arrow keys and buttons to switch pages
**** TODO Highlight most recent reads and writes by highlighting memory
*** TODO Memory page viewer
Display the selected page as a 64x16 grid of characters, aka a 16x16 grid of memory. Put addresses on the left and top.
**** TODO show colors
Use each 16-bit word as a means to generate color to aid viewing.
Foreground text white, background colored.
Use lch to keep it visually consistent.
Top 8 bits determine hue, bottom 8 bits determine lightness 10%-50%. Saturation fixed at 70% or so.
Experiment if that doesn't work.
**** TODO allow memory to be edited by hand
*** TODO display program counters in memory
** TODO CPU viewer web ui
*** TODO global branch grid
*** TODO branch register and flag status
** DONE emulate pipeline waits for load and store
** DONE basic arithmetic
** DONE branch wait for load
** DONE add more defaults to nibble arguments
* Video
** TODO investigate use of multithreaded video during HDRAW
** TODO create sprite test ROM
** TODO implement sprite rendering
** DONE design screen spec
** DONE create bg_color poke test ROM
** DONE create structure for screen component
** DONE implement bg_color display
** DONE create tilemap test ROM
** DONE implement tilemap rendering
* Audio
** DONE describe audio spec
** DONE create PDM encoder/decoder
** TODO create audio worklet with shared memory
** TODO create PDM wavetable player
** TODO create PDM wavetable utility
